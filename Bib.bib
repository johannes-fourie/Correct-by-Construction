@article{CbyCMan,
	Abstract = {High-integrity software systems are often so large that conventional development processes cannot get anywhere near achieving
tolerable defect rates. This article presents an approach that has delivered software with very low defect rates cost-effectively.
We describe the technical details of the approach and the results achieved, and discuss how to overcome barriers to adopting
such best practice approaches. We conclude by observing that where such approaches are compatible and can be deployed in
combination, we have the opportunity to realize the extremely low defect rates needed for high integrity software composed of
many million lines of code.},
	Author = {Martin Croxford and Dr. Roderick Chapman},
	Journal = {The Journal of Defense Software Engineering},
	Month = {12},
	Number = {12},
	Pages = {5--8},
	Title = {Correctness by Construction: A Manifesto for High-Integrity Software},
	Volume = {18},
	Year = {2005}}
    
@article{CbyCPraxis,
	Abstract = {Praxis Critical Systems recently developed a secure Certification
Authority for smart cards. The CA had to satisfy demanding performance and usability
requirements while meeting stringent security constraints. The authors show how you 
can use techniques such as formal specification and static analysis in a realistic
commercial development.},
	Author = {Anthony Hall and Roderick Chapman},
	Journal = {IEEE Software},
	Month = {1},
	Number = {1},
	Pages = {18--25},
	Title = {Correctness by Construction: A Manifesto for High-Integrity Software},
	Volume = {19},
	Year = {2002}}
    
@article{QuickCheck,
   Abstract = {QuickCheck is a tool which aids the Haskell programmer in
formulating and testing properties of programs. Properties are described as Haskell
functions, and can be automatically tested on random input, but it is also possible
to define custom test data generators. We present a number of case studies, in which 
the tool was successfully used, and also point out some pitfalls to avoid. Random
testing is especially suitable for functional programs because properties can be 
stated at a fine grain. When a function is built from separately tested components,
then random testing suffces to obtain good coverage of the definition under test.},
    author = {Claessen, Koen and Hughes, John},
    year = {2000},
    month = {01},
    title = {QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs},
    volume = {46},
    journal = {Proceedings of the ACM SIGPLAN International Conference on Functional Programming, ICFP},
    doi = {10.1145/1988042.1988046}}    
    
@INPROCEEDINGS{Hamlet94randomtesting,
    author = {Richard Hamlet},
    title = {Random Testing},
    booktitle = {Encyclopedia of Software Engineering},
    year = {1994},
    pages = {970--978},
    publisher = {Wiley}
}

@article{BasisForProgramming,
    author = {C.A.R. Hoare},
    title = {An axiomatic basis for computer programming},
    Journal = {Communications of the ACM},
	Month = {10},
	Number = {10},
	Pages = {576--580},
	Title = {An axiomatic basis for computer programming},
	Volume = {12},
	Year = {1969}    
}

@book{SpecifyingSystems,
    author    = {Leslie Lamport},
    title     = {Specifying Systems},
    year      = {2003},
    publisher = {Pearson Education},
    address   = {Boston, Massachusetts}
}

@misc{ Industrial_Use_of_TLA,
    author = {Leslie Lamport},
    title = {Industrial Use of TLA+},
    year = {2018},
    howpublished = {\url{https://lamport.azurewebsites.net/tla/industrial-use.html}},
    note = {[Online; accessed 3-December-2019]}
  }
  
@misc{ FsCheck_home,
    title = {FsCheck},
    howpublished = {\url{https://fscheck.github.io/FsCheck/index.html}},
    note = {[Online; accessed 3-December-2019]}
  }  